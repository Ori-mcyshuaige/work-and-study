) +
scale_fill_manual(
values = colanno
# values = cols
) +
geom_label_repel(
data = df.p,
mapping = aes(x, y, label = rownames(df.p)),
color = 'black', size = 3,
label.padding = unit(0.2, 'lines'),
point.padding = unit(0.5, 'lines'),
min.segment.length = unit(0.1, "lines"),
segment.color = 'grey50', segment.size = 1,
show.legend = F
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.key = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', size = 1)
# axis.text = element_text(size = 15, color = "black",
#                          face = "plain", vjust = 0.5, hjust = 0.5),
# axis.title = element_text(size = 15, color = "black",
#                           face = "plain", vjust = 0.5, hjust = 0.5)
) +
if(model@typeC == 'PCA') {
labs(x = 'PC[1]', y = 'PC[2]')
} else if(model@typeC == 'OPLS-DA') {
labs(x = 't[1]P', y = 't[1]O')
} else if(model@typeC == 'PLS-DA') {
labs(x = 't[1]', y = 't[2]')
}
}
ellipse=F
labelshow=F
p <- ggplot() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_polygon(data = df.ell, aes(x, y), color = 'black', fill = NA)
p
if(ellipse) {
p <- p + stat_ellipse(
data = df.p, geom = 'polygon', level = ci,
aes(x, y, fill = class.id, color = class.id), alpha = I(0.1)
) +
stat_ellipse(
data = df.p, geom = 'blank', level = ci,
aes(-x, -y, fill = class.id)
)
}
if(labelshow) {
p <- p + geom_point(
data = df.p, size = 6, aes(x, y, shape = class.id, color = class.id)
) +
geom_blank(
data = df.p, aes(-x, -y, shape = class.id, color = class.id)
) +
scale_shape_manual(  # 形状参数
values = rep_len(
#c("\u2605","\u25C4","\u25BC","\u25B2"),
c(16, 15, 17, 18),
length(levels(class.id))
)[sort(unique(as.numeric(class.id)))]
# values = shape
) +
scale_color_manual(  # 颜色参数
values = colanno
# values = cols
) +
scale_fill_manual(
values = colanno
# values = cols
) +
geom_label_repel(
data = df.p,
mapping = aes(x, y, label = rownames(df.p)),
color = 'black', size = 3,
label.padding = unit(0.2, 'lines'),
point.padding = unit(0.5, 'lines'),
min.segment.length = unit(0.1, "lines"),
segment.color = 'grey50', segment.size = 1,
show.legend = F
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.key = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', size = 1)
# axis.text = element_text(size = 15, color = "black",
#                          face = "plain", vjust = 0.5, hjust = 0.5),
# axis.title = element_text(size = 15, color = "black",
#                           face = "plain", vjust = 0.5, hjust = 0.5)
) +
if(model@typeC == 'PCA') {
labs(x = 'PC[1]', y = 'PC[2]')
} else if(model@typeC == 'OPLS-DA') {
labs(x = 't[1]P', y = 't[1]O')
} else if(model@typeC == 'PLS-DA') {
labs(x = 't[1]', y = 't[2]')
}
}
p
if(labelshow == F) {
p <- p + geom_point(
data = df.p, size = 5, aes(x, y, shape = class.id, color = class.id)
) +
geom_blank(
data = df.p, aes(-x, -y, shape = class.id, color = class.id)
) +
scale_shape_manual(  # 形状参数
values = rep_len(
#c("\u2605","\u25C4","\u25BC","\u25B2"),
c(16, 15, 17, 18),
length(levels(class.id))
)[sort(unique(as.numeric(class.id)))]
# values = shape
) +
scale_color_manual(
values = colanno
# values = cols
) +
scale_fill_manual(
values = colanno
# values = cols
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.key = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', size = 1)
# axis.text = element_text(size = 15, color = "black",
#                          face = "plain", vjust = 0.5, hjust = 0.5),
# axis.title = element_text(size = 15, color = "black",
#                           face = "plain", vjust = 0.5, hjust = 0.5)
) +
if(model@typeC == 'PCA') {
labs(x = paste0('PC1(',round(100*model@pcaVarVn['p1']/sum(model@pcaVarVn),2),'%)'),
y = paste0('PC2(',round(100*model@pcaVarVn['p2']/sum(model@pcaVarVn),2),'%)'))
} else if(model@typeC == 'OPLS-DA') {
labs(x = 't[1]P', y = 't[1]O')
} else if(model@typeC == 'PLS-DA') {
labs(x = 't[1]', y = 't[2]')
}
}
if(labelshow == F) {
p <- p + geom_point(
data = df.p, size = 5, aes(x, y, shape = class.id, color = class.id)
) +
geom_blank(
data = df.p, aes(-x, -y, shape = class.id, color = class.id)
) +
scale_shape_manual(  # 形状参数
values = rep_len(
#c("\u2605","\u25C4","\u25BC","\u25B2"),
c(16, 15, 17, 18),
length(levels(class.id))
)[sort(unique(as.numeric(class.id)))]
# values = shape
) +
scale_color_manual(
values = colanno
# values = cols
) +
scale_fill_manual(
values = colanno
# values = cols
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.key = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', size = 1)
# axis.text = element_text(size = 15, color = "black",
#                          face = "plain", vjust = 0.5, hjust = 0.5),
# axis.title = element_text(size = 15, color = "black",
#                           face = "plain", vjust = 0.5, hjust = 0.5)
) +
if(model@typeC == 'PCA') {
labs(x = paste0('PC1(',round(100*model@pcaVarVn['p1']/sum(model@pcaVarVn),2),'%)'),
y = paste0('PC2(',round(100*model@pcaVarVn['p2']/sum(model@pcaVarVn),2),'%)'))
} else if(model@typeC == 'OPLS-DA') {
labs(x = 't[1]P', y = 't[1]O')
} else if(model@typeC == 'PLS-DA') {
labs(x = 't[1]', y = 't[2]')
}
}
raw<-read.xlsx('D:/马驰宇/181/戴主任/工作/生信流程/项目/分析/AQ-WDL20200525-FC2/report/results/TOTAL/Statistical Analysis/TOTAL-SIMCA.xlsx')
data<-raw[,c(grep('Control|8Week',colnames(raw)))]
rownames(data)<-1:nrow(data)
class.id=factor(sapply(colnames(data),function(i){paste0(str_extract_all(i,'\\D')[[1]],collapse = '')}),
levels = unique(sapply(colnames(data),function(i){paste0(str_extract_all(i,'\\D')[[1]],collapse = '')})))
colanno<-jet(length(unique(class.id))+2)[1:length(unique(class.id))+1]
names(colanno)<-unique(class.id)
pca <- opls(
x = t(data),
log10L = T, scaleC = 'center',
crossvalI = min(ncol(data), 7),
printL = F, plotL = F
)
colanno
pca <- opls(
x = t(data),
log10L = T, scaleC = 'center',
crossvalI = min(ncol(data), 7),
printL = F, plotL = F
)
model = pca
output = 'D:/马驰宇/181/戴主任/工作/生信流程/项目/分析/AQ-WDL20200525-FC2/report/results/TOTAL/Statistical Analysis'
ci=0.95
labelshow=F
ellipse=F
# PCA/OPLS-DA模型得分图
#
if(model@typeC == 'PCA' | model@typeC == 'PLS-DA') {
df.p <- as.data.frame(model@scoreMN[, 1:2])
} else if(model@typeC == 'OPLS-DA') {
df.p <- cbind(
as.data.frame(model@scoreMN[, 1]),
as.data.frame(model@orthoScoreMN[,1])
)
}
pca <- opls(
x = t(data),
log10L = T, scaleC = 'center',
crossvalI = min(ncol(data), 7),
printL = F, plotL = F
)
raw<-read.xlsx('D:/马驰宇/181/戴主任/工作/生信流程/项目/分析/AQ-WDL20200525-FC2/report/results/TOTAL/Statistical Analysis/TOTAL-SIMCA.xlsx')
data<-raw[,c(grep('CRPC|Normal|Pca|QC',colnames(raw)))]
rownames(data)<-1:nrow(data)
class.id=factor(sapply(colnames(data),function(i){paste0(str_extract_all(i,'\\D')[[1]],collapse = '')}),
levels = unique(sapply(colnames(data),function(i){paste0(str_extract_all(i,'\\D')[[1]],collapse = '')})))
colanno<-jet(length(unique(class.id))+2)[1:length(unique(class.id))+1]
names(colanno)<-unique(class.id)
pca <- opls(
x = t(data),
log10L = T, scaleC = 'center',
crossvalI = min(ncol(data), 7),
printL = F, plotL = F
)
model = pca
output = 'D:/马驰宇/181/戴主任/工作/生信流程/项目/分析/AQ-WDL20200525-FC2/report/results/TOTAL/Statistical Analysis'
ci=0.95
ellipse=F
labelshow=F
# PCA/OPLS-DA模型得分图
#
if(model@typeC == 'PCA' | model@typeC == 'PLS-DA') {
df.p <- as.data.frame(model@scoreMN[, 1:2])
} else if(model@typeC == 'OPLS-DA') {
df.p <- cbind(
as.data.frame(model@scoreMN[, 1]),
as.data.frame(model@orthoScoreMN[,1])
)
}
colnames(df.p) <- c('x', 'y')
# write.xlsx(df.p,file = paste0(output, '/', model@typeC, 'data.xlsx'),row.names=TRUE)
n <- nrow(df.p)
hfn <- 2*(n-1)*(n^2-1)/(n^2*(n-2))*qf(ci, 2, (n-2))
rv <- seq(0, 2*pi, length.out = 100)
# 置信区间数据
df.ell <- data.frame(
x = sqrt(var(df.p$x)*hfn)*cos(rv),
y = sqrt(var(df.p$y)*hfn)*sin(rv)
)
p <- ggplot() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_polygon(data = df.ell, aes(x, y), color = 'black', fill = NA)
p
if(ellipse) {
p <- p + stat_ellipse(
data = df.p, geom = 'polygon', level = ci,
aes(x, y, fill = class.id, color = class.id), alpha = I(0.1)
) +
stat_ellipse(
data = df.p, geom = 'blank', level = ci,
aes(-x, -y, fill = class.id)
)
}
if(labelshow) {
p <- p + geom_point(
data = df.p, size = 6, aes(x, y, shape = class.id, color = class.id)
) +
geom_blank(
data = df.p, aes(-x, -y, shape = class.id, color = class.id)
) +
scale_shape_manual(  # 形状参数
values = rep_len(
#c("\u2605","\u25C4","\u25BC","\u25B2"),
c(16, 15, 17, 18),
length(levels(class.id))
)[sort(unique(as.numeric(class.id)))]
) +
scale_color_manual(  # 颜色参数
values = colanno
) +
scale_fill_manual(
values = colanno
) +
geom_label_repel(
data = df.p,
mapping = aes(x, y, label = rownames(df.p)),
color = 'black', size = 3,
label.padding = unit(0.2, 'lines'),
point.padding = unit(0.5, 'lines'),
min.segment.length = unit(0.1, "lines"),
segment.color = 'grey50', segment.size = 1,
show.legend = F
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.key = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', size = 1)
# axis.text = element_text(size = 15, color = "black",
#                          face = "plain", vjust = 0.5, hjust = 0.5),
# axis.title = element_text(size = 15, color = "black",
#                           face = "plain", vjust = 0.5, hjust = 0.5)
) +
if(model@typeC == 'PCA') {
labs(x = 'PC[1]', y = 'PC[2]')
} else if(model@typeC == 'OPLS-DA') {
labs(x = 't[1]P', y = 't[1]O')
} else if(model@typeC == 'PLS-DA') {
labs(x = 't[1]', y = 't[2]')
}
}
if(labelshow == F) {
p <- p + geom_point(
data = df.p, size = 5, aes(x, y, shape = class.id, color = class.id)
) +
geom_blank(
data = df.p, aes(-x, -y, shape = class.id, color = class.id)
) +
scale_shape_manual(  # 形状参数
values = rep_len(
#c("\u2605","\u25C4","\u25BC","\u25B2"),
c(16, 15, 17, 18),
length(levels(class.id))
)[sort(unique(as.numeric(class.id)))]
) +
scale_color_manual(
values = colanno
) +
scale_fill_manual(
values = colanno
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.key = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', size = 1)
# axis.text = element_text(size = 15, color = "black",
#                          face = "plain", vjust = 0.5, hjust = 0.5),
# axis.title = element_text(size = 15, color = "black",
#                           face = "plain", vjust = 0.5, hjust = 0.5)
) +
if(model@typeC == 'PCA') {
labs(x = paste0('PC1(',round(100*model@pcaVarVn['p1']/sum(model@pcaVarVn),2),'%)'),
y = paste0('PC2(',round(100*model@pcaVarVn['p2']/sum(model@pcaVarVn),2),'%)'))
} else if(model@typeC == 'OPLS-DA') {
labs(x = 't[1]P', y = 't[1]O')
} else if(model@typeC == 'PLS-DA') {
labs(x = 't[1]', y = 't[2]')
}
}
pdf(paste0(output, '/', model@typeC, ' score plot.pdf'))
p
dev.off()
class.id = class.id
colanno = colanno
# PCA/OPLS-DA模型得分图
#
if(model@typeC == 'PCA' | model@typeC == 'PLS-DA') {
df.p <- as.data.frame(model@scoreMN[, 1:2])
} else if(model@typeC == 'OPLS-DA') {
df.p <- cbind(
as.data.frame(model@scoreMN[, 1]),
as.data.frame(model@orthoScoreMN[,1])
)
}
colnames(df.p) <- c('x', 'y')
# write.xlsx(df.p,file = paste0(output, '/', model@typeC, 'data.xlsx'),row.names=TRUE)
n <- nrow(df.p)
hfn <- 2*(n-1)*(n^2-1)/(n^2*(n-2))*qf(ci, 2, (n-2))
rv <- seq(0, 2*pi, length.out = 100)
# 置信区间数据
df.ell <- data.frame(
x = sqrt(var(df.p$x)*hfn)*cos(rv),
y = sqrt(var(df.p$y)*hfn)*sin(rv)
)
p <- ggplot() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_polygon(data = df.ell, aes(x, y), color = 'black', fill = NA)
if(ellipse) {
p <- p + stat_ellipse(
data = df.p, geom = 'polygon', level = ci,
aes(x, y, fill = class.id, color = class.id), alpha = I(0.1)
) +
stat_ellipse(
data = df.p, geom = 'blank', level = ci,
aes(-x, -y, fill = class.id)
)
}
if(labelshow) {
p <- p + geom_point(
data = df.p, size = 6, aes(x, y, shape = class.id, color = class.id)
) +
geom_blank(
data = df.p, aes(-x, -y, shape = class.id, color = class.id)
) +
scale_shape_manual(  # 形状参数
values = rep_len(
#c("\u2605","\u25C4","\u25BC","\u25B2"),
c(16, 15, 17, 18),
length(levels(class.id))
)[sort(unique(as.numeric(class.id)))]
) +
scale_color_manual(  # 颜色参数
values = colanno
) +
scale_fill_manual(
values = colanno
) +
geom_label_repel(
data = df.p,
mapping = aes(x, y, label = rownames(df.p)),
color = 'black', size = 3,
label.padding = unit(0.2, 'lines'),
point.padding = unit(0.5, 'lines'),
min.segment.length = unit(0.1, "lines"),
segment.color = 'grey50', segment.size = 1,
show.legend = F
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.key = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', size = 1)
# axis.text = element_text(size = 15, color = "black",
#                          face = "plain", vjust = 0.5, hjust = 0.5),
# axis.title = element_text(size = 15, color = "black",
#                           face = "plain", vjust = 0.5, hjust = 0.5)
) +
if(model@typeC == 'PCA') {
labs(x = 'PC[1]', y = 'PC[2]')
} else if(model@typeC == 'OPLS-DA') {
labs(x = 't[1]P', y = 't[1]O')
} else if(model@typeC == 'PLS-DA') {
labs(x = 't[1]', y = 't[2]')
}
}
if(labelshow == F) {
p <- p + geom_point(
data = df.p, size = 5, aes(x, y, shape = class.id, color = class.id)
) +
geom_blank(
data = df.p, aes(-x, -y, shape = class.id, color = class.id)
) +
scale_shape_manual(  # 形状参数
values = rep_len(
#c("\u2605","\u25C4","\u25BC","\u25B2"),
c(16, 15, 17, 18),
length(levels(class.id))
)[sort(unique(as.numeric(class.id)))]
) +
scale_color_manual(
values = colanno
) +
scale_fill_manual(
values = colanno
) +
theme_bw() +
theme(
legend.title = element_blank(),
legend.key = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', size = 1)
# axis.text = element_text(size = 15, color = "black",
#                          face = "plain", vjust = 0.5, hjust = 0.5),
# axis.title = element_text(size = 15, color = "black",
#                           face = "plain", vjust = 0.5, hjust = 0.5)
) +
if(model@typeC == 'PCA') {
labs(x = paste0('PC1(',round(100*model@pcaVarVn['p1']/sum(model@pcaVarVn),2),'%)'),
y = paste0('PC2(',round(100*model@pcaVarVn['p2']/sum(model@pcaVarVn),2),'%)'))
} else if(model@typeC == 'OPLS-DA') {
labs(x = 't[1]P', y = 't[1]O')
} else if(model@typeC == 'PLS-DA') {
labs(x = 't[1]', y = 't[2]')
}
}
pdf(paste0(output, '/', model@typeC, ' score plot.pdf'))
p
dev.off()
